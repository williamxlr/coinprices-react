{"version":3,"sources":["sections/fetch-example.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","bg","variant","Brand","href","Toggle","Collapse","className","Text","React","Component","FetchExample","state","bpi","fetch","then","res","json","data","setState","this","currencies","Object","keys","console","log","map","currency","key","Card","border","size","Header","ListGroup","rate","description","_renderCurrencies","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qTAQMA,G,mLAEA,OACE,oCACA,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACzB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,SACC,kBAACJ,EAAA,EAAOK,OAAR,MACA,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,UAAU,uBACzB,kBAACP,EAAA,EAAOQ,KAAR,wBAKJ,kC,GAbaC,IAAMC,YAwEZC,E,4MApDXC,MAAQ,CAAEC,IAAK,I,kEAEM,IAAD,OAChBC,MAAM,qDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAS,IACJL,EAAQK,EAARL,IACR,EAAKM,SAAS,CAAEN,a,0CAIH,IACZA,EAAQO,KAAKR,MAAbC,IACFQ,EAAaC,OAAOC,KAAKV,GAE9B,OADDW,QAAQC,IAAI,QAAQZ,GACZQ,EAAWK,KAAI,SAAAC,GAAQ,OAC7B,yBAAKC,IAAKD,GACV,kBAACE,EAAA,EAAD,CAAOC,OAAO,SAASC,KAAK,MAC5B,kBAACF,EAAA,EAAKG,OAAN,UAAgBL,EAAhB,KACD,kBAACM,EAAA,EAAD,CAAW/B,QAAQ,SAAnB,YACWW,EAAIc,GAAUO,MAExB,kBAACD,EAAA,EAAD,KACCpB,EAAIc,GAAUQ,oB,+BASf,OACI,6BACI,kBAAC,EAAD,MACA,mDACA,6BACI,kBAACN,EAAA,EAAD,CAAMtB,UAAU,SAAWwB,KAAK,MAEhC,kBAACE,EAAA,EAAD,CAAW/B,QAAQ,SAClBkB,KAAKgB,4B,GAzCC1B,aCXZ2B,E,uKATX,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,W,GALUG,aCQE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.efaf277a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nclass NavBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n         <Navbar.Brand href=\"#home\">WARA </Navbar.Brand>\r\n          <Navbar.Toggle />\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Navbar.Text>\r\n             Data Division\r\n            </Navbar.Text>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <br />\r\n        </>\r\n      );\r\n   }\r\n  }\r\n\r\nclass FetchExample extends Component {\r\n    state = { bpi: {}}\r\n\r\n    componentDidMount() {\r\n        fetch('https://api.coindesk.com/v1/bpi/currentprice.json')\r\n          .then(res => res.json())\r\n          .then(data => {\r\n             const { bpi } = data\r\n             this.setState({ bpi })\r\n          })    \r\n    }\r\n \r\n    _renderCurrencies () {\r\n      const { bpi } = this.state\r\n      const currencies = Object.keys(bpi) //['EUR', 'GBP', 'USD']\r\n      console.log(\"bpi: \",bpi)\r\n       return currencies.map(currency => (\r\n        <div key={currency}>\r\n        <Card  border=\"danger\" size=\"sm\" >\r\n        <Card.Header>  {currency} </Card.Header>\r\n       <ListGroup variant=\"flush\">\r\n        1 BTC is {bpi[currency].rate}\r\n        </ListGroup>\r\n        <ListGroup>\r\n        {bpi[currency].description}\r\n        </ListGroup>\r\n        </Card>\r\n        </div>\r\n         \r\n         ) \r\n      )\r\n    }\r\n    render () {\r\n        return (\r\n            <div>\r\n                <NavBar />\r\n                <h4>Bitcoin Price Index</h4>\r\n                <div>\r\n                    <Card className=\"search\"   size=\"sm\" >\r\n                   \r\n                    <ListGroup variant=\"flush\">\r\n                    {this._renderCurrencies()}\r\n                    </ListGroup>\r\n                    </Card>\r\n                   \r\n                \r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FetchExample","import React, { Component } from 'react';\r\nimport FetchExample from './sections/fetch-example';\r\n\r\n\r\nclass App extends Component {\r\n  render () {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <FetchExample />\r\n        \r\n        {/* <Carlist /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}